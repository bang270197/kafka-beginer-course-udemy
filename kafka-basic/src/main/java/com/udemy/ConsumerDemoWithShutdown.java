package com.udemy;import org.apache.kafka.clients.consumer.ConsumerRecords;import org.apache.kafka.clients.consumer.KafkaConsumer;import org.apache.kafka.common.errors.WakeupException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Arrays;import java.util.Properties;public class ConsumerDemoWithShutdown {    public static final Logger logger = LoggerFactory.getLogger(ConsumerDemoWithShutdown.class.getName());    public static void main(String[] args) {        logger.info("============ Starting ConsumerDemoWithShutdown ===========");        String groupId = "my-group";        String topic = "TOPIC-2";        Properties props = new Properties();        props.setProperty("bootstrap.servers", "127.0.0.1:9092");        props.setProperty("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");        props.setProperty("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");        props.put("group.id", groupId);        props.setProperty("auto.offset.reset", "earliest");        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);        final Thread mainThread = Thread.currentThread();        Runtime.getRuntime().addShutdownHook(new Thread() {            public void run() {                logger.info("Deteced a shutdown, let exit by calling cunsumer wake up.");                consumer.wakeup();                try {                    mainThread.join();                    logger.info("Main thread exited.");                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        });        try {            consumer.subscribe(Arrays.asList(topic));            while (true) {                ConsumerRecords<String, String> records = consumer.poll(100);                records.forEach(record -> {                    logger.info("Key: " + record.key() + ", Value: " + record.value());                    logger.info("Partition: " + record.partition() + ", Offset: " + record.offset());                });            }        } catch (WakeupException e) {            logger.info("Consumer is starting to shut down");        } catch (Exception e) {            logger.info("Caught Exception", e);        } finally {            consumer.close();            logger.info("The consumer has been shut down");        }    }}